name: Sync Project Board

on:
  issues:
    types: [opened, edited, closed, reopened, labeled, unlabeled]
  pull_request:
    types: [opened, closed]

jobs:
  sync-board:
    runs-on: ubuntu-latest
    permissions:
      issues: read
      pull-requests: read
      contents: read
      projects: write
      
    steps:
    - name: Sync issue to project board
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const projectId = 'PVT_kwHOACB1z84A_EPx';
          const statusFieldId = 'PVTSSF_lAHOACB1z84A_EPxzgyR8pQ';
          
          // Status option IDs
          const statusIds = {
            todo: 'f75ad846',
            inProgress: '47fc9ee4',
            done: '98236657'
          };
          
          // Get issue details
          const issue = context.payload.issue;
          if (!issue) return;
          
          console.log(`Processing issue #${issue.number}: ${issue.title}`);
          
          // Determine target status based on issue state and labels
          let targetStatus = statusIds.todo;
          const labels = issue.labels.map(l => l.name);
          
          if (issue.state === 'closed') {
            targetStatus = statusIds.done;
          } else if (labels.includes('in-progress')) {
            targetStatus = statusIds.inProgress;
          } else if (labels.includes('ready-for-review')) {
            targetStatus = statusIds.inProgress;
          }
          
          // Find the project item for this issue
          const query = `
            query($owner: String!, $repo: String!, $issue: Int!) {
              repository(owner: $owner, name: $repo) {
                issue(number: $issue) {
                  projectItems(first: 10) {
                    nodes {
                      id
                      project {
                        id
                      }
                    }
                  }
                }
              }
            }
          `;
          
          const variables = {
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue: issue.number
          };
          
          const result = await github.graphql(query, variables);
          const projectItems = result.repository.issue.projectItems.nodes;
          
          // Find item in our project
          const projectItem = projectItems.find(item => item.project.id === projectId);
          if (!projectItem) {
            console.log('Issue not in project board');
            return;
          }
          
          // Update the status
          const mutation = `
            mutation($input: UpdateProjectV2ItemFieldValueInput!) {
              updateProjectV2ItemFieldValue(input: $input) {
                projectV2Item {
                  id
                }
              }
            }
          `;
          
          const updateVariables = {
            input: {
              projectId: projectId,
              itemId: projectItem.id,
              fieldId: statusFieldId,
              value: {
                singleSelectOptionId: targetStatus
              }
            }
          };
          
          await github.graphql(mutation, updateVariables);
          console.log(`Updated issue #${issue.number} project status`);